// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rewire = require("../src/Rewire.bs.js");

var testAssetLocation = "../../../__tests__/assets/testAsset.js";

var getParam = (
        function(rewiredModule) {
          return rewiredModule.getParam();
        }
      );

var getOtherParam = (
      function(rewiredModule) {
        return rewiredModule.getOtherParam();
      }
    );

function oneParamModuleToJs(param) {
  return {
          param: param[/* param */0]
        };
}

function oneParamModuleFromJs(param) {
  return /* record */[/* param */param.param];
}

describe("Rewire", (function () {
        Jest.test("rewire requires a module", (function () {
                var rewiredModule = Rewire.rewire(testAssetLocation);
                return Jest.Expect[/* toEqual */12]("someValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
              }));
        Jest.test("rewire.get gets a named value in a module", (function () {
                var rewiredModule = Rewire.rewire(testAssetLocation);
                return Jest.Expect[/* toEqual */12]({
                            param: /* param */"someValue"
                          }, Jest.Expect[/* expect */0](Rewire.Rewired[/* get */2](rewiredModule, "someModule")));
              }));
        Jest.test("rewire.set sets a value in a module", (function () {
                var rewiredModule = Rewire.rewire(testAssetLocation);
                Jest.Expect[/* toEqual */12]("someValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
                Rewire.Rewired[/* set */0](rewiredModule, "someModule", {
                      param: /* param */"someMockedValue"
                    });
                return Jest.Expect[/* toEqual */12]("someMockedValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
              }));
        Jest.test("rewire.set returns a reset function", (function () {
                var rewiredModule = Rewire.rewire(testAssetLocation);
                Jest.Expect[/* toEqual */12]("someValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
                var reset = Rewire.Rewired[/* set */0](rewiredModule, "someModule", {
                      param: /* param */"someMockedValue"
                    });
                Jest.Expect[/* toEqual */12]("someMockedValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
                Curry._1(reset, /* () */0);
                return Jest.Expect[/* toEqual */12]("someValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
              }));
        Jest.test("rewire.setAll sets multiple values in a module", (function () {
                var all = { };
                all["someModule"] = {
                  param: /* param */"someMockedValue"
                };
                all["someOtherModule"] = {
                  param: /* param */"someOtherMockedValue"
                };
                var rewiredModule = Rewire.rewire(testAssetLocation);
                Rewire.Rewired[/* setAll */1](rewiredModule, all);
                Jest.Expect[/* toEqual */12]("someMockedValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)));
                return Jest.Expect[/* toEqual */12]("someOtherMockedValue", Jest.Expect[/* expect */0](Curry._1(getOtherParam, rewiredModule)));
              }));
        Jest.testAsync(/* None */0, "rewire.withRewiring takes a callback in which values are mocked", (function (finish) {
                var rewiredModule = Rewire.rewire(testAssetLocation);
                var all = { };
                all["someModule"] = {
                  param: /* param */"someMockedValue"
                };
                var rewiringCallback = Rewire.Rewired[/* withRewiring */3](rewiredModule, all);
                return Curry._1(rewiringCallback, (function () {
                              return Curry._1(finish, Jest.Expect[/* toEqual */12]("someMockedValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule))));
                            }));
              }));
        return Jest.testAsync(/* None */0, "rewire.withAsyncRewiring take a promised callback which resolves with variables reset to their original value", (function (finish) {
                      var rewiredModule = Rewire.rewire(testAssetLocation);
                      var all = { };
                      all["someModule"] = {
                        param: /* param */"someMockedValue"
                      };
                      var rewiringCallback = Rewire.Rewired[/* withAsyncRewiring */4](rewiredModule, all);
                      Curry._1(rewiringCallback, (function () {
                                return Promise.resolve(/* () */0);
                              })).then((function () {
                              return Promise.resolve(Curry._1(finish, Jest.Expect[/* toEqual */12]("someValue", Jest.Expect[/* expect */0](Curry._1(getParam, rewiredModule)))));
                            }));
                      return /* () */0;
                    }));
      }));

exports.testAssetLocation = testAssetLocation;
exports.getParam = getParam;
exports.getOtherParam = getOtherParam;
exports.oneParamModuleToJs = oneParamModuleToJs;
exports.oneParamModuleFromJs = oneParamModuleFromJs;
/* getParam Not a pure module */
